{
  // Array elements
  var a = [0];
  assert(a[0] == 0);
  a[0] += 123;
  assert(a[0] == 123);
}
{
  // Boolean operations
  bool b = true;
  assert(!b == false);
  assert((b & false) == false);
  assert((b | false) == true);
  assert((b ^ false) == true);
  assert((b && false) == false);
  assert((b || false) == true);
  assert((b & true) == true);
  assert((b | true) == true);
  assert((b ^ true) == false);
  assert((b && true) == true);
  assert((b || true) == true);
}
{
  // Integer operations
  int i = 240;
  assert(i + 1 == 241);
  assert(i - 1 == 239);
  assert(i * 2 == 480);
  assert(i / 2 == 120);
  assert(i % 2 == 0);
  assert(i < 241);
  assert(i <= 240);
  assert(i == 240);
  assert(i != 239);
  assert(i >= 240);
  assert(i > 239);
  assert((i & 63) == 48); // Java/C/C++ operator precedence
  assert((i | 63) == 255);
  assert((i ^ 63) == 207);
  assert(i << 1 == 480);
  assert(i >> 1 == 120);
  assert(i >>> 1 == 120);
  i = -1;
  assert(-i == 1);
  assert(~i == 0);
}
{
  // Float operations
  float f = 240;
  assert(f + 1 == 241);
  assert(f - 1 == 239);
  assert(f * 2 == 480);
  assert(f / 2 == 120);
  assert(f % 2 == 0);
  assert(f < 241);
  assert(f <= 240);
  assert(f == 240);
  assert(f != 239);
  assert(f >= 240);
  assert(f > 239);
}
{
  // Boolean modification
  bool b = false;
  b |= true;
  assert(b == true);
  b &= true;
  assert(b == true);
  b ^= true;
  assert(b == false);
  b ||= true;
  assert(b == true);
  b &&= true;
  assert(b == true);
}
{
  // Integer modification
  int i = 0;
  i += 10;
  assert(i == 10);
  i -= 20;
  assert(i == -10);
  i *= -2;
  assert(i == 20);
  i /= 3;
  assert(i == 6);
  i %= 5;
  assert(i == 1);
  i <<= 9;
  assert(i == 512);
  i >>= 3;
  assert(i == 64);
  i >>>= 2;
  assert(i == 16);
  i |= 15;
  assert(i == 31);
  i &= 49;
  assert(i == 17);
  i ^= 7;
  assert(i == 22);
}
