/* EBNF of a minimal version of C */
/* For use in http://www.bottlecaps.de/rr/ui */

translation-unit ::= external-declaration*

external-declaration ::= function-definition
                       | declaration

function-definition ::= type-specifier declarator declaration* compound-statement

type-specifier ::= 'void'
                 | 'int'
                 | 'float'
                 | struct-specifier
                 | typedef-name

struct-specifier ::= 'struct' identifier? '{' struct-declaration+ '}'
                   | 'struct' identifier

struct-declaration ::= type-specifier ( declarator ',' )* declarator

declarator ::= pointer? direct-declarator

pointer ::= '*' pointer?

direct-declarator ::= identifier
                    | ( declarator )
                    | direct-declarator '[' constant-expression? ']'
                    | direct-declarator '(' parameter-type-list ')'
                    | direct-declarator '(' identifier* ')'

constant-expression ::= conditional-expression

conditional-expression ::= logical-or-expression
                         | logical-or-expression '?' expression ':' conditional-expression

logical-or-expression ::= logical-and-expression
                        | logical-or-expression '||' logical-and-expression

logical-and-expression ::= inclusive-or-expression
                         | logical-and-expression '&&' inclusive-or-expression

inclusive-or-expression ::= exclusive-or-expression
                          | inclusive-or-expression '|' exclusive-or-expression

exclusive-or-expression ::= and-expression
                          | exclusive-or-expression '^' and-expression

and-expression ::= equality-expression
                 | and-expression '&' equality-expression

equality-expression ::= relational-expression
                      | equality-expression '==' relational-expression
                      | equality-expression '!=' relational-expression

relational-expression ::= shift-expression
                        | relational-expression '<' shift-expression
                        | relational-expression '>' shift-expression
                        | relational-expression '<=' shift-expression
                        | relational-expression '>=' shift-expression

shift-expression ::= additive-expression
                   | shift-expression '<<' additive-expression
                   | shift-expression '>>' additive-expression

additive-expression ::= multiplicative-expression
                      | additive-expression '+' multiplicative-expression
                      | additive-expression '-' multiplicative-expression

multiplicative-expression ::= cast-expression
                            | multiplicative-expression '*' cast-expression
                            | multiplicative-expression '/' cast-expression
                            | multiplicative-expression '%' cast-expression

cast-expression ::= unary-expression
                  | '(' type-name ')' cast-expression

unary-expression ::= postfix-expression
                   | '++' unary-expression
                   | '--' unary-expression
                   | unary-operator cast-expression

postfix-expression ::= primary-expression
                     | postfix-expression '[' expression ']'
                     | postfix-expression '(' assignment-expression* ')'
                     | postfix-expression '.' identifier
                     | postfix-expression '->' identifier
                     | postfix-expression '++'
                     | postfix-expression '--'

primary-expression ::= identifier
                     | constant
                     | string
                     | '(' expression ')'

constant ::= integer-constant
           | character-constant
           | floating-constant

expression ::= assignment-expression
             | expression ',' assignment-expression

assignment-expression ::= conditional-expression
                        | unary-expression assignment-operator assignment-expression

assignment-operator ::= '='
                      | '*='
                      | '/='
                      | '%='
                      | '+='
                      | '-='
                      | '<<='
                      | '>>='
                      | '&='
                      | '^='
                      | '|='

unary-operator ::= '&'
                 | '*'
                 | '+'
                 | '-'
                 | '~'
                 | '!'

type-name ::= type-specifier abstract-declarator?

parameter-type-list ::= parameter-list
                      | parameter-list ',' '...'

parameter-list ::= parameter-declaration
                 | parameter-list ',' parameter-declaration

parameter-declaration ::= type-specifier declarator
                        | type-specifier abstract-declarator
                        | type-specifier

abstract-declarator ::= pointer
                      | pointer direct-abstract-declarator
                      | direct-abstract-declarator

direct-abstract-declarator ::= '(' abstract-declarator ')'
                             | direct-abstract-declarator? '[' constant-expression? ']'
                             | direct-abstract-declarator? '(' parameter-type-list? ')'

typedef-name ::= identifier

declaration ::= type-specifier ( type-specifier ( init-declarator ',' )* init-declarator )* ';'

init-declarator ::= declarator ( '=' initializer )?

initializer ::= assignment-expression
              | '{' initializer-list '}'
              | '{' initializer-list ',' '}'

initializer-list ::= initializer
                   | initializer-list ',' initializer

compound-statement ::= '{' declaration* statement* '}'

statement ::= labeled-statement
            | expression-statement
            | compound-statement
            | selection-statement
            | iteration-statement
            | jump-statement

labeled-statement ::= 'case' constant-expression ':' statement
                    | 'default' ':' statement

expression-statement ::= expression? ';'

selection-statement ::= 'if' '(' expression ')' statement
                      | 'if' '(' expression ')' statement 'else' statement
                      | 'switch' '(' expression ')' statement

iteration-statement ::= 'while' '(' expression ')' statement
                      | 'do' statement 'while' '(' expression ')' ';'
                      | 'for' '(' expression? ';' expression? ';' expression? ')' statement

jump-statement ::= 'continue' ';'
                 | 'break' ';'
                 | 'return' expression? ';'
