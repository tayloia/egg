/* EBNF of the Egg programming language */
/* For use in http://www.bottlecaps.de/rr/ui */
/* See also https://www.w3.org/TR/REC-xml/#sec-notation and https://tabatkins.github.io/railroad-diagrams/generator.html */

module ::= statement+

statement ::= simple-statement ';'
            | compound-statement
            | flow-statement
            | function-definition

simple-statement ::= type-definition
                   | variable-definition
                   | non-defining-statement

non-defining-statement ::= assignment-statement
                         | mutation-statement
                         | void-function-call

compound-statement ::= '{' statement* '}'

type-definition ::= attribute* 'type' type-identifier ( '<' type-list '>' )* '=' type-expression

type-list ::= type-expression
            | type-list ',' type-expression

type-expression ::= type-union-expression

type-union-expression ::= type-nullable-expression
                        | type-union-expression '|' type-nullable-expression

type-nullable-expression ::= type-postfix-expression
                           | type-postfix-expression '?'

type-postfix-expression ::= type-primary-expression
                          | type-postfix-expression '*'
                          | type-postfix-expression '[' type-expression? ']'
                          | type-postfix-expression '(' function-parameter-list? ')'

type-primary-expression ::= 'any'
                          | 'void'
                          | 'null'
                          | 'bool'
                          | 'int'
                          | 'float'
                          | 'string'
                          | 'object'
                          | 'type' object-value
                          | type-identifier
                          | '(' type-expression ')'

type-identifier ::= identifier
                  | identifier '<' type-list '>'

function-definition ::= attribute* type-expression function-identifier '(' function-parameter-list? ')' compound-statement

function-identifier ::= identifier

function-parameter-list ::= function-parameter
                          | function-parameter-list ',' function-parameter

function-parameter ::= attribute* type-expression variable-identifier ( '=' 'null' )?
                     | attribute* '...' type-expression '[' ']' variable-identifier

variable-definition ::= attribute* variable-definition-type variable-identifier ( '=' expression )?

variable-definition-type ::= type-expression
                           | 'var'

variable-identifier ::= identifier

assignment-statement ::= assignment-target assignment-operator expression

assignment-target ::= variable-identifier
                    | '*'+ expression
                    | expression '[' expression ']'
                    | expression '.' identifier

assignment-operator ::= '='
                      | '*='
                      | '/='
                      | '%='
                      | '+='
                      | '-='
                      | '<<='
                      | '>>='
                      | '>>>='
                      | '&='
                      | '^='
                      | '|='

mutation-statement ::= mutation-operator assignment-target

mutation-operator ::= '++'
                    | '--'

flow-statement ::= branch-statement
                 | jump-statement ';'

branch-statement ::= 'if' '(' condition ')' compound-statement else-statement?
                   | 'switch' '(' expression ')' compound-statement
                   | 'while' '(' condition ')' compound-statement
                   | 'do' compound-statement 'while' '(' expression ')' ';'
                   | 'for' '(' simple-statement? ';' condition? ';' non-defining-statement? ')' compound-statement
                   | 'for' '(' variable-definition-type? variable-identifier ':' expression ')' compound-statement
                   | 'try' compound-statement ( 'catch' '(' variable-definition-type variable-identifier )? ( 'finally' compound-statement )?

jump-statement ::= 'continue'
                 | 'break'
                 | 'return' expression?
                 | 'return' '...' expression
                 | 'yield' expression?
                 | 'yield' '...' expression

else-statement ::= 'else' compound-statement
                 | 'else' 'if' '(' condition ')' compound-statement else-statement?

condition ::= expression
            | variable-definition-type variable-identifier '=' expression

expression ::= conditional-expression

conditional-expression ::= null-coalescing-expression
                         | null-coalescing-expression '?' expression ':' conditional-expression

null-coalescing-expression ::= logical-or-expression
                             | null-coalescing-expression '??' logical-or-expression

logical-or-expression ::= logical-and-expression
                        | logical-or-expression '||' logical-and-expression

logical-and-expression ::= inclusive-or-expression
                         | logical-and-expression '&&' inclusive-or-expression

inclusive-or-expression ::= exclusive-or-expression
                          | inclusive-or-expression '|' exclusive-or-expression

exclusive-or-expression ::= and-expression
                          | exclusive-or-expression '^' and-expression

and-expression ::= equality-expression
                 | and-expression '&' equality-expression

equality-expression ::= relational-expression
                      | equality-expression '==' relational-expression
                      | equality-expression '!=' relational-expression

relational-expression ::= shift-expression
                        | relational-expression '<' shift-expression
                        | relational-expression '>' shift-expression
                        | relational-expression '<=' shift-expression
                        | relational-expression '>=' shift-expression

shift-expression ::= additive-expression
                   | shift-expression '<<' additive-expression
                   | shift-expression '>>' additive-expression
                   | shift-expression '>>>' additive-expression

additive-expression ::= multiplicative-expression
                      | additive-expression '+' multiplicative-expression
                      | additive-expression '-' multiplicative-expression

multiplicative-expression ::= unary-expression
                            | multiplicative-expression '*' unary-expression
                            | multiplicative-expression '/' unary-expression
                            | multiplicative-expression '%' unary-expression

unary-expression ::= postfix-expression
                   | unary-operator unary-expression

unary-operator ::= '&'
                 | '*'
                 | '-'
                 | '~'
                 | '!'

postfix-expression ::= primary-expression
                     | postfix-expression '[' expression ']'
                     | postfix-expression '(' parameter-list? ')'
                     | postfix-expression '.' identifier
                     | postfix-expression '?.' identifier

primary-expression ::= identifier
                     | constant-literal
                     | object-value
                     | array-value
                     | lambda-value
                     | '(' expression ')'
                     | cast-specifier '(' expression ')'

cast-specifier ::= 'bool'
                 | 'int'
                 | 'float'
                 | 'string'
                 | type-identifier
                 | '(' type-expression ')'

void-function-call ::= postfix-expression '(' parameter-list? ')'

object-value ::= '{' object-value-list* '}'

object-value-list ::= object-value-entry
                    | object-value-list ','? object-value-entry

object-value-entry ::= object-value-key ':' expression
                     | '...' expression

object-value-key ::= identifier
                   | string

array-value ::= '[' array-value-list* ']'

array-value-list ::= array-value-entry
                   | array-value-list ','? array-value-entry

array-value-entry ::= expression
                    | '...' expression

parameter-list ::= positional-parameter-list
                 | positional-parameter-list ',' named-parameter-list
                 | named-parameter-list

positional-parameter-list ::= positional-parameter
                            | positional-parameter-list ',' positional-parameter

positional-parameter ::= expression
                       | '...' expression

named-parameter-list ::= named-parameter
                       | named-parameter-list ',' named-parameter

named-parameter ::= variable-identifier ':' expression

lambda-value ::= lambda-value-left '->' lambda-value-right

lambda-value-left ::= type-expression? '(' lambda-parameter-list? ')'
                    | variable-identifier

lambda-value-right ::= compound-statement
                     | expression

lambda-parameter-list ::= lambda-parameter
                        | lambda-parameter-list ',' lambda-parameter

lambda-parameter ::= type-expression? variable-identifier ( '=' 'null' )?
                   | '...' type-expression '[' ']' variable-identifier

attribute ::= '@' identifier ( '(' parameter-list ')' )*

/* TODO: Generics */
/* TODO: Generators */
/* TODO: yield ...range; */
/* TODO: [ ...before, after ] and for objects */
/* TODO: [ before, ...after ] and for objects */
/* TODO: @capture */
